// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc2
// source: IO.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvOrd_SendProduct_FullMethodName = "/InvOrd.InvOrd/SendProduct"
	InvOrd_DelProduct_FullMethodName  = "/InvOrd.InvOrd/DelProduct"
	InvOrd_GetProduct_FullMethodName  = "/InvOrd.InvOrd/GetProduct"
	InvOrd_UpdProduct_FullMethodName  = "/InvOrd.InvOrd/UpdProduct"
)

// InvOrdClient is the client API for InvOrd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvOrdClient interface {
	SendProduct(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DelProduct(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetProduct(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetProdReply, error)
	UpdProduct(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type invOrdClient struct {
	cc grpc.ClientConnInterface
}

func NewInvOrdClient(cc grpc.ClientConnInterface) InvOrdClient {
	return &invOrdClient{cc}
}

func (c *invOrdClient) SendProduct(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, InvOrd_SendProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invOrdClient) DelProduct(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, InvOrd_DelProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invOrdClient) GetProduct(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetProdReply, error) {
	out := new(GetProdReply)
	err := c.cc.Invoke(ctx, InvOrd_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invOrdClient) UpdProduct(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, InvOrd_UpdProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvOrdServer is the server API for InvOrd service.
// All implementations must embed UnimplementedInvOrdServer
// for forward compatibility
type InvOrdServer interface {
	SendProduct(context.Context, *CreateRequest) (*StatusReply, error)
	DelProduct(context.Context, *IdRequest) (*StatusReply, error)
	GetProduct(context.Context, *IdRequest) (*GetProdReply, error)
	UpdProduct(context.Context, *CreateRequest) (*StatusReply, error)
	mustEmbedUnimplementedInvOrdServer()
}

// UnimplementedInvOrdServer must be embedded to have forward compatible implementations.
type UnimplementedInvOrdServer struct {
}

func (UnimplementedInvOrdServer) SendProduct(context.Context, *CreateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProduct not implemented")
}
func (UnimplementedInvOrdServer) DelProduct(context.Context, *IdRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProduct not implemented")
}
func (UnimplementedInvOrdServer) GetProduct(context.Context, *IdRequest) (*GetProdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedInvOrdServer) UpdProduct(context.Context, *CreateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdProduct not implemented")
}
func (UnimplementedInvOrdServer) mustEmbedUnimplementedInvOrdServer() {}

// UnsafeInvOrdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvOrdServer will
// result in compilation errors.
type UnsafeInvOrdServer interface {
	mustEmbedUnimplementedInvOrdServer()
}

func RegisterInvOrdServer(s grpc.ServiceRegistrar, srv InvOrdServer) {
	s.RegisterService(&InvOrd_ServiceDesc, srv)
}

func _InvOrd_SendProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvOrdServer).SendProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvOrd_SendProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvOrdServer).SendProduct(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvOrd_DelProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvOrdServer).DelProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvOrd_DelProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvOrdServer).DelProduct(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvOrd_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvOrdServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvOrd_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvOrdServer).GetProduct(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvOrd_UpdProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvOrdServer).UpdProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvOrd_UpdProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvOrdServer).UpdProduct(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvOrd_ServiceDesc is the grpc.ServiceDesc for InvOrd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvOrd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvOrd.InvOrd",
	HandlerType: (*InvOrdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProduct",
			Handler:    _InvOrd_SendProduct_Handler,
		},
		{
			MethodName: "DelProduct",
			Handler:    _InvOrd_DelProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _InvOrd_GetProduct_Handler,
		},
		{
			MethodName: "UpdProduct",
			Handler:    _InvOrd_UpdProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "IO.proto",
}
